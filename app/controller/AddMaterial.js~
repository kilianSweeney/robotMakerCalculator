Ext.define('motioncalc.controller.AddMaterial', {
	extend : 'Ext.app.Controller',
	requires : 'motioncalc.store.MaterialDensities',
animateShape: function(oX,oY,route){
	function drawCircle(circleLocation,newPosition,radius,route){
		oldPi = 0.01;
		newPi = oldPi + (newPosition/100);
		console.log(newPi);
		newPi = newPi * Math.PI;
		ctx.beginPath();
		ctx.arc(circleLocation[0],circleLocation[1],radius,oldPi,newPi,false);
		ctx.stroke();
		ctx.closePath();		
		setTimeout('motioncalc.app.getController("AddMaterial").animateShape(0,' + newPosition + ','  + route + ')',1);
	}
	function drawLine(curPos,newPos,route){
		ctx.beginPath();
		ctx.moveTo(curPos[0],curPos[1]);
		ctx.lineTo(newPos[0],newPos[1]);
		ctx.stroke();
		ctx.closePath();
		setTimeout('motioncalc.app.getController("AddMaterial").animateShape(' + newPos[0] + ',' + newPos[1] + ','  + route + ')',1);
	}
	var 	canvas = document.getElementById("shapeCanvas"),
		ctx = canvas.getContext("2d"),
		allRoutes = [
			[[0,0],[0,100],[0,1]],
			[[0,100],[100,100],[1,0]],
			[[100,100],[100,0],[0,-1]],
			[[100,0],[0,0],[-1,0]],
			[[50,50],[200,0],[20,null]],
		],
		newRoute = false;
		nX = oX + allRoutes[route][2][0];
		nY = oY + allRoutes[route][2][1];
		curPos = [oX,oY],
		newPos = [nX,nY],
		endPos = [allRoutes[route][1][0],allRoutes[route][1][1]],
		isCircle = (allRoutes[route][2][1]==null);
	if(isCircle){
		newPos[0]=oY;
		newPos[1]=0;
	}
	if(newPos[0] == endPos[0] && newPos[1] == endPos[1]){
		newRoute = true;
		route++;
		if(typeof allRoutes[route] == 'undefined')return;
		isCircle = allRoutes[route][2][1]==null;
		if(!isCircle){
			curPos[0] = allRoutes[route][0][0];
			curPos[1] = allRoutes[route][0][1];
			newPos[0] = curPos[0] + allRoutes[route][2][0];
			newPos[1] = curPos[1] + allRoutes[route][2][1];
		}
	}
	if(isCircle){
		curPos[0] = allRoutes[route][0][0];
		curPos[1] = allRoutes[route][0][1];
		newPos[0] = newRoute ? 0 : oY + 1;
		newPos[1] = allRoutes[route][1][1];
	}
//	if(oY==360)return;
	ctx.lineWidth = 1;
	ctx.strokeStyle = 'red';
	if(isCircle)drawCircle(curPos,newPos[0],allRoutes[route][2][0],route);
	else drawLine(curPos,newPos,route);
},
	config: {
		views : ['motioncalc.view.AddMaterial'],
		refs : {
			materials: '#materialDensities',
			buttonMaterials: '#buttonManageMaterials',
			buttonRestore: '#buttonRestoreMaterials',
			buttonOne: '#buttonManageMaterialOne',
			buttonTwo: '#buttonManageMaterialTwo',
			addMaterialView: '#addMaterialID',
		},
		control: {
			addMaterialView: {
				activate: function(){
setTimeout('motioncalc.app.getController("AddMaterial").animateShape(0,0,0)',1000);
				}
			},
			materials: {
				change: function(){
					var record, name,value,densities;
					densities = Ext.getCmp('materialDensities');
					value = densities.getValue();
					if(value == 0 || value == null)return;
					value = motioncalc.app.conversionFunctions.unitsConvert(value,motioncalc.app.DENSITYBASEUNITS,Ext.getCmp('materialUnitType').getValue(),'Density');
					record = densities.record,
					name = densities.getDisplayField();
					name = record.get(name);
					Ext.getCmp('materialName').setValue(name);
					Ext.getCmp('materialDensity').setValue(value);
					Ext.getCmp('materialOriginalValue').setValue(value);
					Ext.getCmp('AddMaterialTop').setTitle('Edit Material');
					Ext.getCmp('materialName').setReadOnly(true);
					Ext.getCmp('buttonManageMaterials').set('text','remove');
					Ext.getCmp('buttonManageMaterials').addCls('danger-class');
				}
			},
			buttonMaterials: {
				tap: function(){
					if(Ext.getCmp('materialOriginalValue').getValue()==0){
						Ext.getCmp('materialDensities').setValue(null);
						Ext.getCmp('materialDensities').showPicker();
					}
					else {
						var name = Ext.getCmp('materialName').getValue();
						Ext.Msg.confirm(							
						   	'Remove "' + name + '"',
							'Do you want to permanently remove "' + name + '" from the Material Densities List?',
							function(buttonId) {
								if (buttonId === 'yes') {
									var 	stor = Ext.getStore('_MaterialDensities'),
										rec = stor.findRecord('name',Ext.getCmp('materialName').getValue());
									stor.remove(rec);
									stor.sync();
									motioncalc.app.mainView.setActiveItem(3);            
								}
							}
						);
					}
				}
			},
			buttonRestore: {
				tap: function(){
					Ext.Msg.confirm(							
					   	'Restore List',
						'Do you want to restore to the default Material Densities List?',
						function(buttonId) {
							if (buttonId === 'yes') {
								motioncalc.app.restoreMaterials(true);
								motioncalc.app.mainView.setActiveItem(3);
							}
						}
					);				
				}
			},
			buttonOne: {
				tap: function(){
					motioncalc.app.mainView.setActiveItem(3);
				}
			},
			buttonTwo: {
				tap: function(){
					var ogValue,name,density;
					name = Ext.String.capitalize(Ext.getCmp('materialName').getValue());
					density = motioncalc.app.conversionFunctions.unitsConvert(Ext.getCmp('materialDensity').getValue(),Ext.getCmp('materialUnitType').getValue(),motioncalc.app.DENSITYBASEUNITS,'Density');
					ogValue = Ext.getCmp('materialOriginalValue').getValue();
					if(name == ''){
						Ext.Msg.alert(							
						   	'"Material Name"',
							'Please give this material a name.'
						);
						return;
					}
					
					if(density == 0){
						Ext.Msg.alert(							
						   	'Amount',
							'Please give this material a density value amount.'
						);
						return;
					}
					Ext.Msg.confirm(							
					   	'Save "' + name + '"?',
						'Do you want to save "' + name + '"?',
						function(buttonId) {
							if (buttonId === 'yes') {
								var stor = Ext.getStore('_MaterialDensities');
								stor.load();
								var rec = stor.findRecord('name',name);
								if(rec===null){
									stor.add({name:name,density:density});
									rec = stor.findRecord('name',name);
								}
								else rec.set('density',density);
								rec.save();
								motioncalc.app.mainView.setActiveItem(3);
							}
						}
					);
				}
			}

		}
	},
});


